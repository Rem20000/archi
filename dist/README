# Intro
-------

  The main code (dist.c) computes the Hamming distance of
  two given sequences.

  The auxiliary code (genseq.c) generates sequences with a
  given length.
      
# Compilation
-------------

  $ make

  This command compiles both the sequence generator and the
  sequence analyzer.

# Running
---------

  First generate two sequences of the same length using the
  sequence generator:

  $ ./genseq s1.dna [length]
  $ ./genseq s2.dna [length]

  Then, you can run the analyzer on both sequences:

  $ ./dist s1.dna s2.dna

# Output
--------

  The program output the Hamming distance as well as the time it took to
  process the sequences.
  
  hamming distance: 17410
  elapsed (ns)    : 2236.667

# Potential optimizations
-------------------------

 1 - Memory alignment.
 2 - Is the popcount optimal?
 3 - Loop unrolling
 4 - Vectorization (SSE, AVX, or AVX512 for x86_64 architectures).
   4.1 - Compiler auto-vectorization
   4.2 - OpenMP vectorization directive
   4.3 - Intrinsics (https://www.intel.com/content/www/us/en/docs/intrinsics-guide/index.html#)
   4.4 - Inline assembly :)
 5 - Test different compiler optimizations.
 6 - Test the code using different lengths of sequences that fit into different cache levels.
 7 - Parallelization using OpenMP on the main loop.
 8 - Use different compilers (at least two): gcc, clang, aocc, icx, and icc
 9 - Add other performance metrics: bandwidth (GiB/s), Giga bases per second (Gb/s), elapsed time, ...

# Report
--------

 You are to provide a performance analysis report of all the versions with plots comparing the
 performance of all the conducted experiments.
